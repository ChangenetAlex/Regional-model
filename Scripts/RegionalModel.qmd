---
title: "RGBIF request to extract species occurrences for plant and animal in 50 km buffer"
author: "Alex Changenet and Mariasole Calbi"
format: html
editor: visual
---

This script extracts species occurrences and clean data for usage in the ECOLOPES model
The output are as csv files

```{r}
# Load Required Libraries
library(rgbif)
library(dplyr)
library(CoordinateCleaner)
library(sf)
library(taxonlookup)
library(U.Taxonstand)
library(stringr)
library(openxlsx)

# Define Centroid Coordinates and Buffer
site_centroid_coords <- c(44.40726,8.9338624)[c(2,1)] #Example centroid coordinates for ECOLOPES site
dfcenter <- list("ECOLOPES1"= site_centroid_coords) #it is possible to add more centroids too here
buffer_radius <- 50000 #50 km buffer around the centroid; adjustable if needed


# Set GBIF user credentials
user <- ""  # GBIF user name
pwd <- ""   # GBIF password
email <- "" # GBIF email
gbif_taxon_keys <- c(1,6)  # Taxon keys for animals and plants in GBIF

# Function to Generate Buffer Polygons for Defined Centroids
buffer_polygons<- lapply(dfcenter,function(coords){
  city_center <- st_sfc(st_point(coords), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ")
  buffer <- st_buffer(city_center, buffer_radius)
  st_as_text(buffer)
})

# GBIF Data Extraction: Download Species Occurrences Within Buffer
gbifdw<-lapply(buffer_polygons[[1]],function(buffer){
  gbif_download <- occ_download(
    type="and",
    pred_in("taxonKey", gbif_taxon_keys),
    pred("hasGeospatialIssue", FALSE),
    pred("hasCoordinate", TRUE),
    pred_within(buffer),
    format = "SIMPLE_CSV",
    user=user,pwd=pwd,email=email
  )
})
occ_download_wait(gbifdw) # Monitor GBIF request status

# Data Cleaning Pipeline
gbifdw_filt <-gbifdw %>%
  occ_download_get() %>%
  occ_download_import() %>%
  setNames(tolower(names(.))) %>% # set lowercase column names to work with CoordinateCleaner
  filter(occurrencestatus  == "PRESENT") %>%
  filter(!basisofrecord %in% c("FOSSIL_SPECIMEN")) %>%
  filter(year >= 1900) %>%
  filter(coordinateprecision < 0.01 | is.na(coordinateprecision)) %>%
  filter(coordinateuncertaintyinmeters < 10000 | is.na(coordinateuncertaintyinmeters)) %>%
  filter(!coordinateuncertaintyinmeters %in% c(301,3036,999,9999)) %>%  #remove records with known default values for coordinateUncertaintyInMeters
  filter(!decimallatitude == 0 | !decimallongitude == 0) %>% #remove point plotted along the prime meridian or equator
  cc_sea() %>% # remove from ocean
  distinct(decimallongitude,decimallatitude,specieskey,datasetkey, .keep_all = TRUE) %>%
  glimpse() # look at results of pipeline

#cancel data if needed
#occ_download_cancel(user=user,pwd=pwd,
#                    key="")

# Separate Plant and Animal Data
plants <- gbifdw_filt[gbifdw_filt$kingdom == "Plantae",]
animals <- gbifdw_filt[gbifdw_filt$kingdom == "Animalia",]

# Load TPL Database and Prepare Plant Data for Name Matching
# This part is designed to standardize plant taxonomy using The Plant List (TPL) database

# Load TPL Databases and Combine
dat1 <- read.xlsx("Plants_TPL_database_part1.xlsx")
dat2 <- read.xlsx("Plants_TPL_database_part2.xlsx")
dat3 <- read.xlsx("Plants_TPL_database_part3.xlsx")
tpl_database <- rbind(dat1, dat2, dat3)
rm(dat1, dat2, dat3)

# Run Plant Taxonomy Lookup and Match to ECOLOPES
#first taxonomy cleanup by JENS
tracheophytes <- plant_lookup(include_counts=TRUE)
# seperate genus from species binomial
genera <- word(unique(plants$species),1)
genera <- data.frame(genus=genera, species=unique(plants$species))
# join with data species data
genera <- left_join(genera, tracheophytes[,c(3,6)])
# exclude bryophytes
genera <- with(genera, genera[group!="Bryophytes",])
genera<-genera[complete.cases(genera),]

#match data to the remaining species
plants <- plants %>% filter(species %in% genera$species)

# Match Names to TPL Database
specnos <- plants %>%
  group_by(species) %>%
  dplyr::summarise(count = n())

# run the main function of name matching
name_match_results <- nameMatch(spList = specnos$species, spSource = tpl_database, author = FALSE, max.distance = 1, Append = FALSE)

# Separate Results with and without Fuzzy Matching
matched_species <- name_match_results %>%
  filter(Fuzzy == FALSE | (!is.na(Accepted_SPNAME) & Fuzzy == TRUE))

#extract species with no Fuzzy matching
name_match_results2<-name_match_results[name_match_results$Fuzzy == FALSE,]
name_match_results_FUZZY<-name_match_results[name_match_results$Fuzzy == TRUE,]
name_match_results3<-name_match_results_FUZZY[!is.na(name_match_results_FUZZY$Accepted_SPNAME),]#keep good ones with fuzzy match anyway
matched_species <- rbind(name_match_results2,name_match_results3)

# Finalize plant data with TPL matches
plants_tpl <- plants %>% filter(species %in% matched_species$Submitted_Name)
#add new taxonomic name to trait df
res_final <- matched_species[,c(2,8,10,19,21)]
colnames(res_final)<-c("AccSpeciesName","Genus_TPL","ID_TPL","Family_TPL","TPL_spname")

unique<-unique(plants$species)
spp_idx<-match(unique, res_final$AccSpeciesName)
res_final_ord <- res_final[spp_idx,]

#insert back new species Id according to original unique identifiers,also add genus and family column
plants_tpl <- plants_tpl %>%
  mutate(
    TPL_SP = factor(species, levels = unique(species), labels = res_final_ord$TPL_spname),
    tip = sub(" ", "_", TPL_SP)
  )

# Load and Filter for PFGs Trait Database (Plant Functional Groups)
pfgs_traits<-read.csv("PFGs_species_traits.csv", header = T, row.names = 1, check.names = F)
pfgs_spp_ecolopes <- pfgs_traits %>% filter(tip %in% plants_tpl$tip)
pfgs_list<-pfgs_spp_ecolopes$PFG # List of PFGs around the selected location for model input

# Process Animal Data and Retrieve Animal Functional Groups (AFGs)
afgs_spp<-read.csv("...")  # Placeholder path for AFG data
afgs_spp_ecolopes<-animals[animals$species %in% afg_spp$sp,]
afgs_list<-afgs_spp_ecolopes$AFG # List of AFGs around the selected location for model input
```
